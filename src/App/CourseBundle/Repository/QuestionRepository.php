<?php
namespace App\CourseBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * @param integer $id Course id
     *
     * @return \Doctrine\ORM\Query
     */
    public function findByCourse($id = null) {
        $query = $this->findAllQuestionsQb($id);

        return $query->getQuery();
    }

    /**
     * Return QueryBuilder for full data
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function findAllQuestionsQb($id = null) {
        if ($id == null) {
            throw new BadRequestHttpException("No id provided");
        }

        $query = $this->findSimpleQuestion()
            ->andWhere('question.course = :course')
            ->setParameter(':course', $id);

        return $query;
    }
    
    /**
     * @param integer $id Question id
     *
     * @return \Doctrine\ORM\Query
     */
    public function findOneQuestionQuery($id = null) {
        $query = $this->findOneQuestionQb($id);

        return $query->getQuery();
    }

    /**
     * @param integer $id Question id
     *
     * @return \Doctrine\ORM\QueryBuilder
     *
     * @throws \Exception
     */
    private function findOneQuestionQb($id = null) {
        if ($id == null) {
            throw new BadRequestHttpException("Question with provided Id not finded");
        }

        $query = $this->findSimpleQuestion()
            ->andWhere('question.id = :id')
            ->setParameter(':id', $id);

        return $query;
    }

    /**
     * @param integer $id Question id
     *
     * @return \Doctrine\ORM\Query
     */
    public function findAllQuestionInRowQuery($id = null, $courseId = null) {
        $query = $this->findAllQuestionInRowQb($id, $courseId);

        return $query->getQuery();
    }

    /**
     * @param integer $id Question id
     *
     * @return \Doctrine\ORM\QueryBuilder
     *
     * @throws \Exception
     */
    private function findAllQuestionInRowQb($id = null, $courseId = null) {
        if ($id == null) {
            throw new BadRequestHttpException("Question with provided Id not finded");
        } else if ($courseId == null) {
            throw new BadRequestHttpException("Course with provided Id not finded");
        }

        $query = $this->findSimpleQuestion()
            ->andWhere('question.course = :courseId')
            ->andWhere('question.parentId = :id')
            ->setParameter(':id', $id)
            ->setParameter(':courseId', $courseId);

        return $query;
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function findSimpleQuestion() {
        $query = $this->createQueryBuilder('question')
            ->select('question');

        return $query;
    }

}
